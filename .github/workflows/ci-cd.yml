name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: 3.11

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Lint with flake8
      run: |
        flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: mypy app --ignore-missing-imports

    - name: Security scan with bandit
      run: bandit -r app -f json -o bandit-report.json
      continue-on-error: true

    - name: Test with pytest
      env:
        REDIS_URL: redis://localhost:6379/0
        BRIGHT_DATA_TOKEN: ${{ secrets.BRIGHT_DATA_TOKEN_TEST }}
        ENVIRONMENT: test
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          bandit-report.json
          coverage.xml

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Dependency vulnerability scan
      run: |
        pip install safety
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: |
          trivy-results.sarif
          safety-report.json

  # Build and push Docker image
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-,format=short
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          COMMIT_SHA=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # Integration tests
  integration-test:
    needs: build
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Pull Docker image
      run: docker pull ${{ needs.build.outputs.image-tag }}

    - name: Run integration tests
      env:
        DOCKER_IMAGE: ${{ needs.build.outputs.image-tag }}
        REDIS_URL: redis://localhost:6379/0
        BRIGHT_DATA_TOKEN: ${{ secrets.BRIGHT_DATA_TOKEN_TEST }}
      run: |
        # Start the application container
        docker run -d \
          --name test-api \
          --network host \
          -e REDIS_URL=$REDIS_URL \
          -e BRIGHT_DATA_TOKEN=$BRIGHT_DATA_TOKEN \
          -e ENVIRONMENT=test \
          $DOCKER_IMAGE

        # Wait for container to start
        sleep 30

        # Run integration tests
        python -m pytest tests/integration/ -v --tb=short

        # Cleanup
        docker stop test-api
        docker rm test-api

  # Deploy to staging
  deploy-staging:
    needs: [build, integration-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$STAGING_KEY" > ~/.ssh/staging_key
        chmod 600 ~/.ssh/staging_key
        
        # Deploy using docker-compose
        ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST << EOF
          cd /opt/company-extraction-api
          export VERSION=${IMAGE_TAG##*:}
          docker-compose -f deployment/docker-compose.staging.yml pull
          docker-compose -f deployment/docker-compose.staging.yml up -d --remove-orphans
          
          # Wait for health check
          sleep 60
          curl -f http://localhost:8000/api/v1/health || exit 1
          
          echo "Staging deployment completed successfully"
        EOF

    - name: Run staging smoke tests
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}
        STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}
      run: |
        python -m pytest tests/smoke/ -v \
          --base-url=$STAGING_URL \
          --api-key=$STAGING_API_KEY

  # Deploy to production
  deploy-production:
    needs: [build, integration-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Notify deployment start
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🚀 Starting production deployment of version ${{ github.ref_name }}"}' \
          $SLACK_WEBHOOK

    - name: Deploy to production
      env:
        PROD_HOST: ${{ secrets.PROD_HOST }}
        PROD_USER: ${{ secrets.PROD_USER }}
        PROD_KEY: ${{ secrets.PROD_SSH_KEY }}
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$PROD_KEY" > ~/.ssh/prod_key
        chmod 600 ~/.ssh/prod_key
        
        # Rolling deployment
        ssh -i ~/.ssh/prod_key -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST << EOF
          cd /opt/company-extraction-api
          
          # Backup current version
          docker tag company-extraction-api:current company-extraction-api:rollback || true
          
          # Deploy new version
          export VERSION=${IMAGE_TAG##*:}
          ./deployment/scripts/rolling-update.sh $VERSION
          
          echo "Production deployment completed successfully"
        EOF

    - name: Run production smoke tests
      env:
        PROD_URL: ${{ secrets.PROD_URL }}
        PROD_API_KEY: ${{ secrets.PROD_API_KEY }}
      run: |
        python -m pytest tests/smoke/ -v \
          --base-url=$PROD_URL \
          --api-key=$PROD_API_KEY

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        body: |
          ## Changes in this Release
          
          ### Features
          - Company extraction API with comprehensive data extraction
          - Batch processing capabilities
          - Advanced caching and performance optimization
          - Security hardening and monitoring
          
          ### Improvements
          - Enhanced error handling and reliability
          - Performance optimizations
          - Monitoring and alerting improvements
          
          ### Docker Images
          - `${{ needs.build.outputs.image-tag }}`
          
          ### Deployment
          This version has been automatically deployed to production and passed all tests.
        files: |
          sbom.spdx.json
        draft: false
        prerelease: false

    - name: Notify deployment success
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ Production deployment of version ${{ github.ref_name }} completed successfully!"}' \
          $SLACK_WEBHOOK

    - name: Notify deployment failure
      if: failure()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"❌ Production deployment of version ${{ github.ref_name }} failed! Check GitHub Actions for details."}' \
          $SLACK_WEBHOOK

  # Cleanup old images
  cleanup:
    needs: [deploy-production, deploy-staging]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Cleanup old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ github.event.repository.name }}
        package-type: container
        min-versions-to-keep: 10
        delete-only-untagged-versions: true

  # Performance testing (optional, runs on schedule)
  performance-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run performance tests
      env:
        DOCKER_IMAGE: ${{ needs.build.outputs.image-tag }}
        LOAD_TEST_DURATION: 300  # 5 minutes
        CONCURRENT_USERS: 10
      run: |
        # Start application
        docker run -d \
          --name perf-test-api \
          -p 8000:8000 \
          -e ENVIRONMENT=test \
          $DOCKER_IMAGE

        sleep 30

        # Install k6 for load testing
        curl -s https://get.k6.io | bash

        # Run performance tests
        k6 run tests/performance/load_test.js \
          --duration ${LOAD_TEST_DURATION}s \
          --vus $CONCURRENT_USERS

        # Cleanup
        docker stop perf-test-api
        docker rm perf-test-api

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json